//
//  VideoListViewController.m
//  TestVideoJoiner
//
//  Created by Hepburn Alex on 14-11-20.
//  Copyright (c) 2014年 Hepburn Alex. All rights reserved.
//

#import "VideoListViewController.h"
#import "VideoListTableViewCell.h"
#import "VideoDetialViewController.h"
#import "ShowChoiceView.h"
#import "ShowWantGoView.h"
#import "FriendViewController.h"
#import "ImageDownManager.h"
#import "JSON.h"
#import "VideoUploadManager.h"
#import "RefreshTableView.h"
#import "ThirdLoginViewController.h"
#import "SearchViewController.h"
#import "NetVideoPlayView.h"
#import "PopSearchView.h"

@interface VideoListViewController ()<UITableViewDataSource, UITableViewDelegate, RefreshTableViewDelegate, UIActionSheetDelegate> {
    NetVideoPlayView *mPlayView;
    RefreshTableView *_mTableView;
    NSMutableArray *_dataArray;
    int miIndex;
    int miPage;
}

@property (nonatomic, strong) ImageDownManager *mDownManager;

@end

@implementation VideoListViewController


- (void)viewDidLoad {
    [super viewDidLoad];
    
    _dataArray = [[NSMutableArray alloc] init];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(RefreshCity) name:kMsg_ShowCenter object:nil];
    self.title = @"本地";
    [self AddLeftImageBtn:[UIImage imageNamed:@"f_citybtn"] target:self action:@selector(OnLeftClick)];
    [self AddRightTextBtn:@"搜索" target:self action:@selector(OnSearchClick)];
    
    UIButton *rightBtn = (UIButton *)self.navigationItem.rightBarButtonItem.customView;
    rightBtn.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue" size:18];
    [rightBtn setTitleColor:[UIColor grayColor] forState:UIControlStateNormal];
    
    _mTableView = [[RefreshTableView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
    _mTableView.autoresizingMask = UIViewAutoresizingFlexibleHeight|UIViewAutoresizingFlexibleWidth;
    _mTableView.backgroundColor = [UIColor clearColor];
    _mTableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    _mTableView.delegate = self;
    [self.view addSubview:_mTableView];
    
    [self StartDownload];
}

- (void)RefreshCity {
    self.title = kUserInfoManager.mCityName;
}

- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    [self Cancel];
}

#pragma mark - RefreshTableView

- (void)ReloadList:(RefreshTableView *)sender {
    miPage = 0;
    [self StartDownload];
}

- (void)LoadMoreList:(RefreshTableView *)sender {
    [self StartDownload];
}

- (BOOL)CanRefreshTableView:(RefreshTableView *)sender {
    return !_mDownManager;
}

#pragma mark - ImageDownManager

- (void)Cancel{
    [self StopLoading];
    SAFE_CANCEL_ARC(_mDownManager);
}

- (void)StartDownload{
    if(_mDownManager){
        return;
    }
    [self StartLoading];
    
    _mDownManager = [[ImageDownManager alloc] init];
    _mDownManager.delegate = self;
    _mDownManager.OnImageDown = @selector(OnLoadFinish:);
    _mDownManager.OnImageFail = @selector(OnLoadFail:);
    
    NSString *urlstr = [NSString stringWithFormat:@"%@/mobileapi/video/city_video_list", SERVER_URL];
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    [dict setObject:kUserInfoManager.mCityID forKey:@"c_id"];
    [dict setObject:[NSString stringWithFormat:@"%d", miPage+1] forKey:@"page"];
    [dict setObject:@"10" forKey:@"page_size"];
    [_mDownManager PostHttpRequest:urlstr :dict];
}

- (void)OnLoadFinish:(ImageDownManager *)sender {
    
    NSDictionary *dict = [sender.mWebStr JSONValue];
    [self Cancel];
    if (dict && [dict isKindOfClass:[NSDictionary class]]) {
        NSLog(@"%@", dict);
        int iStatus = [[dict objectForKey:@"status"] intValue];
        if (iStatus == 1001) {
            if (miPage == 0) {
                [_dataArray removeAllObjects];
            }
            NSArray *array = [dict objectForKey:@"lst"];
            for (int i = 0; i<array.count; i++) {
                NSDictionary *dDict = array[i];
                VideoListModel *model = [VideoListModel CreateWithDict:dDict];
                [_dataArray addObject:model];
            }
            miPage ++;
            _mTableView.mbMoreHidden = (array.count < 10);
        }
        [_mTableView FinishLoading];
        [_mTableView reloadData];
    }
}

- (void)OnLoadFail:(ImageDownManager *)sender {
    [self Cancel];
}

#pragma mark - TableView

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView;{
    return 1;
}

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return _dataArray.count;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    return KscreenWidth+15;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    static NSString *cellId = @"cellID";
    VideoListTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellId];
    if (cell == nil) {
        cell = [[VideoListTableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellId];
        cell.delegate = self;
        cell.headClick = @selector(OnHeadClick:);
        cell.videoClick = @selector(OnVideoClick:);
        cell.moreCLick = @selector(OnMoreClick:);
        cell.haveGoClick = @selector(OnHaveGoClick:);
        cell.xingClick = @selector(OnXingClick:);
        cell.locationClick = @selector(OnLocationClick:);
    }
    VideoListModel *model = _dataArray[indexPath.row];
    cell.tag = indexPath.row;
    [cell loadView:model];
    return cell;
}

#pragma mark - TableViewCellDelegate

- (void)OnHeadClick:(VideoListTableViewCell *)sender{
    NSLog(@"cell.tag==%ld,%@",(long)sender.tag,_dataArray[sender.tag]);
    VideoListModel *model = _dataArray[sender.tag];
    FriendViewController *fvc = [[FriendViewController alloc]init];
    fvc.headPic = model.avater;
    fvc.uid = model.uid;
    fvc.nikeName = model.nickname;
    fvc.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:fvc animated:YES];
}

- (void)OnVideoClick:(VideoListTableViewCell *)sender{
    NSLog(@"cell.tag==%ld",sender.tag);
    [self RemovePlayer];
    VideoListModel *model = _dataArray[sender.tag];
    mPlayView = [[NetVideoPlayView alloc] initWithFrame:sender.mVideoView.bounds];
    [sender.mVideoView addSubview:mPlayView];
    [mPlayView PlayVideo:model.src];
}

- (void)OnMoreClick:(VideoListTableViewCell *)sender {
    miIndex = (int)sender.tag;
    UIActionSheet *actView = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:@"算了" destructiveButtonTitle:nil otherButtonTitles:@"黄赌毒！我要举报", nil];
    [actView showInView:self.view];
}

#pragma mark - 加去过
- (void)OnHaveGoClick:(VideoListTableViewCell *)sender {
    if (!kkIsLogin) {
        ThirdLoginViewController *ctrl = [[ThirdLoginViewController alloc] init];
        [self.navigationController pushViewController:ctrl animated:NO];
    }
    else {
        VideoListModel *model = _dataArray[sender.tag];
        [[ShareMethod Share] HaveGo:model];
    }
}

#pragma mark - 加想去
- (void)OnXingClick:(VideoListTableViewCell *)sender {
    if (!kkIsLogin) {
        ThirdLoginViewController *ctrl = [[ThirdLoginViewController alloc] init];
        [self.navigationController pushViewController:ctrl animated:NO];
    }
    else {
        VideoListModel *model = _dataArray[sender.tag];
        [[ShareMethod Share] WantGo:model];
    }
}

#pragma mark - ShareMethodDelegate

- (void)OnWantGoStart:(ShareMethod *)sender {
    [self StartLoading];
}

- (void)OnHaveGoStart:(ShareMethod *)sender {
    [self StartLoading];
}

- (void)OnShareMethodFinish:(ShareMethod *)sender {
    [self StopLoading];
}

- (void)OnLocationClick:(VideoListTableViewCell *)sender{
     NSLog(@"cell.tag==%ld",sender.tag);
    VideoDetialViewController *ctrl = [[VideoDetialViewController alloc] init];
    ctrl.mVideoModel = _dataArray[sender.tag];
    ctrl.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:ctrl animated:YES];
}

- (void)OnLeftClick {
    [[NSNotificationCenter defaultCenter] postNotificationName:kMsg_ShowLeft object:nil];
}

- (void)OnSearchClick {
    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    PopSearchView *searchView = [[PopSearchView alloc] initWithFrame:window.bounds];
    searchView.delegate = self;
    searchView.OnSearchText = @selector(OnSearchText:);
    [window addSubview:searchView];
}

- (void)OnSearchText:(NSString *)text {
    SearchViewController *ctrl = [[SearchViewController alloc] init];
    ctrl.mText = text;
    ctrl.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:ctrl animated:YES];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
    NSLog(@"VideoList viewWillDisappear");
    [self RemovePlayer];
    [ShareMethod Share].delegate = nil;
}

- (void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear:animated];
    NSLog(@"VideoList viewWillAppear");
    [ShareMethod Share].delegate = self;
}

- (void)RemovePlayer {
    @autoreleasepool {
        if (mPlayView) {
            [mPlayView StopVideo];
            [mPlayView removeFromSuperview];
            mPlayView = nil;
        }
    }
}
/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

@end
